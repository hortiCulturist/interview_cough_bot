import os
from sqlite3 import IntegrityError

import aiogram
from aiogram import Bot
from aiogram import types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils import executor

import button
import config
import db

storage = MemoryStorage()
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot, storage=storage)


async def on_startup(_):
    print('Bot activated')
    db.start_db()


class quest(StatesGroup):
    q1 = State()
    q2 = State()
    q3 = State()
    q4 = State()
    q5 = State()
    q6 = State()
    q7 = State()
    q8 = State()
    q9 = State()
    q10 = State()


class MassSend(StatesGroup):
    sendd = State()


@dp.message_handler(commands='start')
async def strt(message: types.Message):
    try:
        db.db_add(message.from_user.id, message.from_user.first_name, message.from_user.username)
    except IntegrityError:
        pass
    await bot.send_message(message.from_user.id, text="–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!\n"
                                                      "–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –∑—Ä–æ–∑—É–º—ñ—Ç–∏ –Ω–∞—Å–∫—ñ–ª—å–∫–∏ –≤–∏ –æ–±—ñ–∑–Ω–∞–Ω—ñ "
                                                      "—É —Ç–µ–º—ñ –∫–∞—à–ª—é —Ç–∞ –π–æ–≥–æ –ª—ñ–∫—É–≤–∞–Ω–Ω—ñ, –ø—Ä–æ–π–¥—ñ—Ç—å –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ "
                                                      "–¥—ñ–∑–Ω–∞—î—Ç–µ—Å—è —Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å –∑–Ω–∞–Ω—å —É —Ü—ñ–π —Ç–µ–º—ñ\n",
                           reply_markup=button.interview())

@dp.message_handler(commands="users")
async def usrs(message: types.Message):
    await bot.send_message(message.from_user.id, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {len(db.all_user())}")

@dp.message_handler(commands='send', state=None)
async def snd(message: types.Message):


    if message.from_user.id not in config.ADMIN_ID:
        await bot.send_message(message.from_user.id, text="–í –î–û–°–¢–£–ü–Ü –í–Ü–î–ú–û–í–õ–ï–ù–û!")
    else:
        await bot.send_message(message.from_user.id, text=f"–ù–∞–ø–∏—à–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è "
                                                          f"—Ä–∞—Å—Å—ã–ª–∫–∏ –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(db.all_user())} "
                                                          f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", reply_markup=button.cancel())
        await MassSend.sendd.set()

@dp.message_handler(text='–û–¢–ú–ï–ù–ê',state=MassSend.sendd)
async def cncl(message: types.Message, state: FSMContext):
    await state.finish()
    await bot.send_message(message.from_user.id, '–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=ReplyKeyboardRemove())

@dp.message_handler(content_types=aiogram.types.ContentType.ANY,
                    state=MassSend.sendd)
async def send(message: types.Message, state: FSMContext):
    good, bad = 0, 0
    await state.finish()
    errors_list = []
    for i in db.all_user():
        try:
            await bot.send_message(i[0], message.text)
            good += 1
        except Exception as e:
            bad += 1
            errors_list.append(e)
    await bot.send_message(message.from_user.id, '–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\n'
                                                 f'–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {good}\n'
                                                 f'–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {bad}\n'
                                                 f'–û—à–∏–±–∫–∏ {set(errors_list)}')


# ******************************************************************************************************************
# 1 –í–û–ü–†–û–°

@dp.callback_query_handler(text='start_again', state=None)
@dp.message_handler(text_startswith='–ü–æ—á–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è', state=None)
async def question_1(message: types.Message):
    #    await db.start_num_db()
    #    await db.add_pnt(message.from_user.id)
    await quest.q1.set()
    await bot.send_message(message.from_user.id, '–î–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ 10 –ø–∏—Ç–∞–Ω—å —Ç–∞ –¥—ñ–∑–Ω–∞–π—Ç–µ—Å—è –Ω–∞—Å–∫—ñ–ª—å–∫–∏ –≤–∏ '
                                                 '–æ–±—ñ–∑–Ω–∞–Ω—ñ —É —Ç–µ–º—ñ –∫–∞—à–ª—é —Ç–∞ –π–æ–≥–æ –ª—ñ–∫—É–≤–∞–Ω–Ω—ñ ü§î',
                           reply_markup=ReplyKeyboardRemove())
    await bot.send_message(message.from_user.id, text="1 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 10\n\n"
                                                      "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∏–π –∫–∞—à–µ–ª—å –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î –ª—ñ–∫—É–≤–∞–Ω–Ω—è",
                           reply_markup=button.yes_no())


@dp.callback_query_handler(text='yes_yes', state=quest.q1)
async def question_1(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–©–µ –π —è–∫ –ø–æ—Ç—Ä–µ–±—É—î!\n'
                                                   f'–í–∞–∂–ª–∏–≤–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–≤–Ω–æ –µ–ª—ñ–º—ñ–Ω—É–≤–∞—Ç–∏ –º–æ–∫—Ä–æ—Ç–∏–Ω–Ω—è –∑ –Ω–∏–∂–Ω—ñ—Ö '
                                                   f'–¥–∏—Ö–∞–ª—å–Ω–∏—Ö —à–ª—è—Ö—ñ–≤. –ù–∞–π—á–∞—Å—Ç—ñ—à–µ –∑ —Ü—ñ—î—é –º–µ—Ç–æ—é –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å '
                                                   f'–ª—ñ–∫–∞—Ä—Å—å–∫—ñ –∑–∞—Å–æ–±–∏.',
                           reply_markup=button.next())


@dp.callback_query_handler(text='nope', state=quest.q1)
async def question_1(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–ê–±—Å–æ–ª—é—Ç–Ω–æ –≤—ñ—Ä–Ω–æ!\n'
                                                   f'–ú–æ–∫—Ä–æ—Ç–∏–Ω–Ω—è —Å–ª—ñ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–≤–Ω–æ –µ–ª—ñ–º—ñ–Ω—É–≤–∞—Ç–∏ –∑ '
                                                   f'–¥–∏—Ö–∞–ª—å–Ω–∏—Ö —à–ª—è—Ö—ñ–≤ —ñ —Ç—É—Ç –¥–æ—Ü—ñ–ª—å–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ '
                                                   f'–º—É–∫–æ–ª—ñ—Ç–∏–∫–∏. –Ü –Ω–µ –∑–∞–±—É–≤–∞—î–º–æ –∑–≤–æ–ª–æ–∂—É–≤–∞—Ç–∏ –ø–æ–≤—ñ—Ç—Ä—è —É '
                                                   f'–ø—Ä–∏–º—ñ—â–µ–Ω–Ω—ñ!',
                           reply_markup=button.next())
    await call.answer()


# 1 –í–û–ü–†–û–°
# ******************************************************************************************************************
# 2 –í–û–ü–†–û–°


@dp.callback_query_handler(text='nxt', state=quest.q1)
async def question_2(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f"2 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 10\n\n"
                                                   f"–ú—É–∫–æ–ª—ñ—Ç–∏—á–Ω–∞ —Ç–∞ –≤—ñ–¥—Ö–∞—Ä–∫—É–≤–∞–ª—å–Ω–∞ –¥—ñ—è ‚Äì —Ü–µ –æ–¥–Ω–µ –π —Ç–µ —Å–∞–º–µ",
                           reply_markup=button.yes_no())
    await quest.next()


@dp.callback_query_handler(text='yes_yes', state=quest.q2)
async def question_2(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–ó–æ–≤—Å—ñ–º –Ω–µ —Ç–∞–∫!\n'
                                                   f'–ú—É–∫–æ–ª—ñ—Ç–∏–∫–∏ (—Ç–∞–∫—ñ —è–∫ –∞–º–±—Ä–æ–∫—Å–æ–ª —Ç–∞ –∞—Ü–µ—Ç–∏–ª—Ü–∏—Å—Ç–µ—ó–Ω) '
                                                   f'—Ä–æ–∑—Ä—ñ–¥–∂—É—é—Ç—å –º–æ–∫—Ä–æ—Ç–∏–Ω–Ω—è, –∞–ª–µ –Ω–∞ –≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ –≤—ñ–¥—Ö–∞—Ä–∫—É–≤–∞–ª—å–Ω–∏—Ö '
                                                   f'–∑–∞—Å–æ–±—ñ–≤ –Ω–µ –∑–±—ñ–ª—å—à—É—é—Ç—å –π–æ–≥–æ –æ–±‚Äô—î–º.',
                           reply_markup=button.next())


@dp.callback_query_handler(text='nope', state=quest.q2)
async def question_2(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–î—ñ–π—Å–Ω–æ!\n'
                                                   f'–°–ø—Ä–∞–≤–∂–Ω—ñ –º—É–∫–æ–ª—ñ—Ç–∏–∫–∏ (–∞–º–±—Ä–æ–∫—Å–æ–ª, –∞—Ü–µ—Ç–∏–ª—Ü–∏—Å—Ç–µ—ó–Ω) '
                                                   f'—Ä–æ–∑—Ä—ñ–¥–∂—É—é—Ç—å –º–æ–∫—Ä–æ—Ç–∏–Ω–Ω—è, a –≤—ñ–¥—Ö–∞—Ä–∫—É–≤–∞–ª—å–Ω—ñ –∑–∞—Å–æ–±–∏ '
                                                   f'–∑–º–µ–Ω—à—É—é—Ç—å –≤‚Äô—è–∑–∫—ñ—Å—Ç—å —Å–ª–∏–∑—É –∑–∞ —Ä–∞—Ö—É–Ω–æ–∫ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è —ó—ó –æ–±‚Äô—î–º—É.',
                           reply_markup=button.next())


# 2 –í–û–ü–†–û–°
# ******************************************************************************************************************
# 3 –í–û–ü–†–û–°


@dp.callback_query_handler(text='nxt', state=quest.q2)
async def question_3(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text="3 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 10\n\n"
                                                   "–§–∞—Ä–º–∞–∫–æ–ª–æ–≥—ñ—á–Ω—ñ –µ—Ñ–µ–∫—Ç–∏ –∞–º–±—Ä–æ–∫—Å–æ–ª—É –Ω–µ –æ–±–º–µ–∂—É—é—Ç—å—Å—è –º—É–∫–æ–ª—ñ—Ç–∏—á–Ω–æ—é –¥—ñ—î—é.",
                           reply_markup=button.yes_no())
    await quest.next()


@dp.callback_query_handler(text='yes_yes', state=quest.q3)
async def question_3(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–¶–µ –ø—Ä–∞–≤–¥–∞!\n'
                                                   f'–î–æ–¥–∞—Ç–∫–æ–≤–æ –º–∞—î –º—ñ—Å—Ü–µ–≤—É –∑–Ω–µ–±–æ–ª—é–≤–∞–ª—å–Ω—É, '
                                                   f'–ø—Ä–æ—Ç–∏–∑–∞–ø–∞–ª—å–Ω—É —Ç–∞ —ñ–º—É–Ω–æ–º–æ–¥—É–ª—é—é—á—É –¥—ñ—é. '
                                                   f'–Ñ –Ω–∞–≤—ñ—Ç—å –∞–º–±—Ä–æ–∫—Å–æ–ª —É —Ñ–æ—Ä–º—ñ –æ—Ä–∞–ª—å–Ω–æ–≥–æ —Å–ø—Ä–µ—é, '
                                                   f'—è–∫–∏–π –≤–ø—Ä–æ–¥–æ–≤–∂ 3 –¥—ñ–± –¥–æ–ª–∞—î —Å–∏–º–ø—Ç–æ–º–∏ —Ñ–∞—Ä–∏–Ω–≥—ñ—Ç—É '
                                                   f'—É –¥–æ—Ä–æ—Å–ª–∏—Ö ‚Äì ¬´–†–µ—Å–ø–∏–∫—Å –°–ø—Ä–µ–π¬ª.',
                           reply_markup=button.next())


@dp.callback_query_handler(text='nope', state=quest.q3)
async def question_3(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–î—É–∂–µ –Ω–∞–≤—ñ—Ç—å –Ω–µ –æ–±–º–µ–∂—É—î—Ç—å—Å—è!\n'
                                                   f'–ô–æ–≥–æ —Ñ–∞—Ä–º–∞–∫–æ–¥–∏–Ω–∞–º—ñ–∫–∞ –æ–±—à–∏—Ä–Ω–∞: '
                                                   f'–æ–∫—Ä—ñ–º –≤–ø–ª–∏–≤—É –Ω–∞ –º–æ–∫—Ä–æ—Ç–∏–Ω–Ω—è –π–æ–º—É –ø—Ä–∏—Ç–∞–º–∞–Ω–Ω—ñ '
                                                   f'—â–µ –º—ñ—Å—Ü–µ–≤–æ–∞–Ω–µ—Å—Ç–µ–∑—É–≤–∞–ª—å–Ω–∞, –ø—Ä–æ—Ç–∏–∑–∞–ø–∞–ª—å–Ω–∞ —Ç–∞ '
                                                   f'—ñ–º—É–Ω–æ—Ç—Ä–æ–ø–Ω–∞ –¥—ñ—è. ',
                           reply_markup=button.next())


# 3 –í–û–ü–†–û–°
# ******************************************************************************************************************
# 4 –í–û–ü–†–û–°


@dp.callback_query_handler(text='nxt', state=quest.q3)
async def question_4(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text="4 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 10\n\n"
                                                   "–°–∏–º–ø—Ç–æ–º–∏ –≥–æ—Å—Ç—Ä–æ–≥–æ —Ñ–∞—Ä–∏–Ω–≥—ñ—Ç—É –º–∏–Ω–∞—é—Ç—å "
                                                   "–ø—Ä–∏–±–ª–∏–∑–Ω–æ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å –ª—ñ–∫—É–≤–∞–Ω–Ω—è. ",
                           reply_markup=button.yes_no())
    await quest.next()


@dp.callback_query_handler(text='yes_yes', state=quest.q4)
async def question_4(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–£—è–≤—ñ—Ç—å —Å–æ–±—ñ, –∞–ª–µ –Ω—ñ!\n'
                                                   f'–î–æ—Å—Ç–∞—Ç–Ω—å–æ –≤—Å—å–æ–≥–æ 3 –¥–Ω—ñ–≤ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ¬´–†–µ—Å–ø–∏–∫—Å –°–ø—Ä–µ—é¬ª, '
                                                   f'—â–æ–± –ø–æ–≤–Ω—ñ—Å—Ç—é –ø–æ–∑–±–∞–≤–∏—Ç–∏—Å—å —Å–∏–º–ø—Ç–æ–º—ñ–≤ –≥–æ—Å—Ç—Ä–æ–≥–æ —Ñ–∞—Ä–∏–Ω–≥—ñ—Ç—É!',
                           reply_markup=button.next())


@dp.callback_query_handler(text='nope', state=quest.q4)
async def question_4(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–î—ñ–π—Å–Ω–æ!\n'
                                                   f'¬´–†–µ—Å–ø–∏–∫—Å –°–ø—Ä–µ–π¬ª –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É—Å—É–≤–∞—î —Å–∏–º–ø—Ç–æ–º–∏ –≥–æ—Å—Ç—Ä–æ–≥–æ '
                                                   f'–Ω–µ—É—Å–∫–ª–∞–¥–Ω–µ–Ω–æ–≥–æ —Ñ–∞—Ä–∏–Ω–≥—ñ—Ç—É –º–µ–Ω—à–µ –Ω—ñ–∂ –∑–∞ 3 –¥–Ω—ñ ‚Äì –¥–æ–≤–µ–¥–µ–Ω–æ '
                                                   f'–Ω–∞—É–∫–æ–≤–∏–º–∏ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è–º–∏!',
                           reply_markup=button.next())


# 4 –í–û–ü–†–û–°
# ******************************************************************************************************************
# 5 –í–û–ü–†–û–°


@dp.callback_query_handler(text='nxt', state=quest.q4)
async def question_5(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text="5 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 10\n\n"
                                                   "–ê–º–±—Ä–æ–∫—Å–æ–ª —Ç–∞ –≥–ª—ñ—Ü–∏—Ä—Ä–∏–∑–∏–Ω –∑–¥–∞—Ç–Ω—ñ –∑–∞–±–µ–∑–ø–µ—á–∏—Ç–∏ "
                                                   "–∑–∞—Ö–∏—Å—Ç –∫–ª—ñ—Ç–∏–Ω –¥–∏—Ö–∞–ª—å–Ω–∏—Ö —à–ª—è—Ö—ñ–≤ –≤—ñ–¥ —ñ–Ω—Ñ—ñ–∫—É–≤–∞–Ω–Ω—è SARS-nCoV-2",
                           reply_markup=button.yes_no())
    await quest.next()


@dp.callback_query_handler(text='yes_yes', state=quest.q5)
async def question_5(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–ü—Ä–∞–≤–¥–∞!\n'
                                                   f'–¶—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –∑–¥–∞—Ç–Ω—ñ –ø–µ—Ä–µ—à–∫–æ–¥–∂–∞—Ç–∏ –ø—Ä–æ–Ω–∏–∫–Ω–µ–Ω–Ω—é SARS-nCoV-2 '
                                                   f'–¥–æ –∫–ª—ñ—Ç–∏–Ω —Ä–µ—Å–ø—ñ—Ä–∞—Ç–æ—Ä–Ω–æ–≥–æ —Ç—Ä–∞–∫—Ç—É. '
                                                   f'–í–∞–∂–ª–∏–≤–æ –ø—Ä–∏ —Ü—å–æ–º—É, —â–æ ¬´–†–µ—Å–ø–∏–∫—Å –°–ø—Ä–µ–π¬ª '
                                                   f'—Å—Ç–≤–æ—Ä—é—î –≤–∏—Å–æ–∫—ñ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—ó —Ü–∏—Ö —Ä–µ—á–æ–≤–∏–Ω '
                                                   f'–Ω–∞ —Å–ª–∏–∑–æ–≤—ñ–π –æ–±–æ–ª–æ–Ω—Ü—ñ –≥–æ—Ä–ª–∞ ‚Äì ¬´–≤—Ö—ñ–¥–Ω–∏—Ö –≤–æ—Ä–æ—Ç–∞—Ö¬ª '
                                                   f'–¥–ª—è –∫–æ—Ä–æ–Ω–∞–≤—ñ—Ä—É—Å—É.',
                           reply_markup=button.next())


@dp.callback_query_handler(text='nope', state=quest.q5)
async def question_5(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–î—É–∂–µ –Ω–∞–≤—ñ—Ç—å –∑–¥–∞—Ç–Ω–∏–π!\n'
                                                   f'–ê–º–±—Ä–æ–∫—Å–æ–ª —Å–∞–º –ø–æ —Å–æ–±—ñ –∑–¥–∞—Ç–Ω–∏–π –∑–∞–ø–æ–±—ñ–≥–∞—Ç–∏ –ø—Ä–æ–Ω–∏–∫–Ω–µ–Ω–Ω—é '
                                                   f'–≤—ñ—Ä—É—Å—É –¥–æ –∫–ª—ñ—Ç–∏–Ω –¥–∏—Ö–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–∞–∫—Ç—É –ª—é–¥–∏–Ω–∏. '
                                                   f'–ö—Ä—ñ–º —Ç–æ–≥–æ, —Ç–∞–∫–∏–π —Å–∞–º–µ –µ—Ñ–µ–∫—Ç –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —ñ –¥–ª—è '
                                                   f'–≥–ª—ñ—Ü–∏—Ä–∏–∑–∏–Ω—É ‚Äì –æ–¥–Ω–æ–≥–æ –∑—ñ —Å–∫–ª–∞–¥–æ–≤–∏—Ö ¬´–†–µ—Å–ø–∏–∫—Å –°–ø—Ä–µ—é¬ª.',
                           reply_markup=button.next())


# 5 –í–û–ü–†–û–°
# ******************************************************************************************************************
# 6 –í–û–ü–†–û–°


@dp.callback_query_handler(text='nxt', state=quest.q5)
async def question_6(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text="6 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 10\n\n"
                                                   "–Ø–∫—â–æ –∞–º–±—Ä–æ–∫—Å–æ–ª —ñ –∞—Ü–µ—Ç–∏–ª—Ü–∏—Å—Ç–µ—ó–Ω –º–∞—é—Ç—å –º—É–∫–æ–ª—ñ—Ç–∏—á–Ω–∏–π –µ—Ñ–µ–∫—Ç, "
                                                   "—Ç–æ —ó—Ö —Å–ø—ñ–ª—å–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –Ω–µ–¥–æ—Ü—ñ–ª—å–Ω–æ",
                           reply_markup=button.yes_no())
    await quest.next()


@dp.callback_query_handler(text='yes_yes', state=quest.q6)
async def question_6(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–¶–µ –Ω–µ —Ç–∞–∫.\n'
                                                   f'–á—Ö —Å–ø—ñ–ª—å–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ–ª–∫–æ–º –≤–∏–ø—Ä–∞–≤–¥–∞–Ω–æ, '
                                                   f'–∞–¥–∂–µ  –∞—Ü–µ—Ç–∏–ª—Ü–∏—Å—Ç–µ—ó–Ω –ø—Ä–æ—Ç—è–≥–æ–º 30 —Ö–≤ —Ä–æ–∑—Ä—ñ–¥–∂—É—î –º–æ–∫—Ä–æ—Ç–∏–Ω–Ω—è, '
                                                   f'–∞ –∞–º–±—Ä–æ–∫—Å–æ–ª –∑–∞–±–µ–∑–ø–µ—á—É—î —Ç—Ä–∏–≤–∞–ª–µ –π–æ–≥–æ –≤–∏–≤–µ–¥–µ–Ω–Ω—è. '
                                                   f'–û—Å—å –Ω–∞–≤—ñ—Ç—å —Ç–∞–∫–∞ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è —î ‚Äì —Ç–∞–±–ª–µ—Ç–∫–∏ ¬´–†–µ—Å–ø–∏–∫—Å¬ª.',
                           reply_markup=button.next())


@dp.callback_query_handler(text='nope', state=quest.q6)
async def question_6(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–¢–æ—á–Ω–æ!\n'
                                                   f'–ê—Ü–µ—Ç–∏–ª—Ü–∏—Å—Ç–µ—ó–Ω —à–≤–∏–¥–∫–æ –∑–º–µ–Ω—à—É—î –≤‚Äô—è–∑–∫—ñ—Å—Ç—å –º–æ–∫—Ä–æ—Ç–∏–Ω–Ω—è, '
                                                   f'–∞ –∞–º–±—Ä–æ–∫—Å–æ–ª —Å—Ç–∏–º—É–ª—é—î –π–æ–≥–æ –≤–∏–≤–µ–¥–µ–Ω–Ω—è. '
                                                   f'–¢–æ–º—É —Ç–∞–±–ª–µ—Ç–∫–∏ ¬´–†–µ—Å–ø–∏–∫—Å¬ª –∑–Ω–∞—á–Ω–æ –∑–º–µ–Ω—à—É—î —Å–∫–∞—Ä–≥–∏ –Ω–∞ '
                                                   f'–∫–∞—à–µ–ª—å —Ç–∞ –º–æ–∫—Ä–æ—Ç–∏–Ω–Ω—è.',
                           reply_markup=button.next())


# 6 –í–û–ü–†–û–°
# ******************************************************************************************************************
# 7 –í–û–ü–†–û–°


@dp.callback_query_handler(text='nxt', state=quest.q6)
async def question_7(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text="7 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 10\n\n"
                                                   "–ê–º–±—Ä–æ–∫—Å–æ–ª –¥–æ—Ü—ñ–ª—å–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–≤–∞—Ç–∏ —Ä–∞–∑–æ–º –∑ –∞–Ω—Ç–∏–±—ñ–æ—Ç–∏–∫–∞–º–∏",
                           reply_markup=button.yes_no())
    await quest.next()


@dp.callback_query_handler(text='yes_yes', state=quest.q7)
async def question_7(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–¶–µ –ø—Ä–∞–≤–¥–∞!\n'
                                                   f'–ê–º–±—Ä–æ–∫—Å–æ–ª –∑–±—ñ–ª—å—à—É—î –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∞–Ω—Ç–∏–±—ñ–æ—Ç–∏–∫–∞ —à–ª—è—Ö–æ–º '
                                                   f'–∑–±—ñ–ª—å—à–µ–Ω–Ω—è –π–æ–≥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—ó –≤ –ª–µ–≥–µ–Ω—è—Ö —Ç–∞ –º–æ–∫—Ä–æ—Ç–∏–Ω–Ω—ñ. '
                                                   f'–†–∞–∑–æ–º –∑ –ª–æ—Ä–∞—Ç–∞–¥–∏–Ω–æ–º –∞–º–±—Ä–æ–∫—Å–æ–ª –≤—Ö–æ–¥–∏—Ç—å –¥–æ —Å–∫–ª–∞–¥—É '
                                                   f'—Ç–∞–±–ª–µ—Ç–æ–∫ ¬´–†–µ—Å–ø–∏–∫—Å –õ¬ª - —ñ–¥–µ–∞–ª—å–Ω–æ–≥–æ –¥–æ–ø–æ–≤–Ω–µ–Ω–Ω—è –¥–æ '
                                                   f'–∞–Ω—Ç–∏–±—ñ–æ—Ç–∏–∫–æ—Ç–µ—Ä–∞–ø—ñ—ó ‚Äì –ø—ñ–¥–≤–∏—â—É—î —ó—ó –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —ñ '
                                                   f'–ø—Ä–∏–∫—Ä–∏–≤–∞—î –º–æ–∂–ª–∏–≤—É –∞–ª–µ—Ä–≥—ñ—é –Ω–∞ –∞–Ω—Ç–∏–±—ñ–æ—Ç–∏–∫.',
                           reply_markup=button.next())


@dp.callback_query_handler(text='nope', state=quest.q7)
async def question_7(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–ù–∞—Å–ø—Ä–∞–≤–¥—ñ –¥–æ—Ü—ñ–ª—å–Ω–æ!\n'
                                                   f'–ö–æ–º–±—ñ–Ω–∞—Ü—ñ—è –∞–º–±—Ä–æ–∫—Å–æ–ª—É —Ç–∞ –ª–æ—Ä–∞—Ç–∞–¥–∏–Ω—É, '
                                                   f'—â–æ –≤—Ö–æ–¥–∏—Ç—å –¥–æ —Å–∫–ª–∞–¥—É –ø—Ä–µ–ø–∞—Ä–∞—Ç—É ¬´–†–µ—Å–ø–∏–∫—Å –õ¬ª, '
                                                   f'—î –æ—Å–æ–±–ª–∏–≤–æ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—é —É –∑–±—ñ–ª—å—à–µ–Ω–Ω—ñ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ '
                                                   f'–∞–Ω—Ç–∏–±—ñ–æ—Ç–∏–∫–æ—Ç–µ—Ä–∞–ø—ñ—ó —Ö–≤–æ—Ä–æ–± –æ—Ä–≥–∞–Ω—ñ–≤ –¥–∏—Ö–∞–Ω–Ω—è —Ç–∞ '
                                                   f'–∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—ñ –º–æ–∂–ª–∏–≤–æ—ó –∞–ª–µ—Ä–≥—ñ—ó –Ω–∞ –∞–Ω—Ç–∏–±—ñ–æ—Ç–∏–∫.',
                           reply_markup=button.next())


# 7 –í–û–ü–†–û–°
# ******************************************************************************************************************
# 8 –í–û–ü–†–û–°


@dp.callback_query_handler(text='nxt', state=quest.q7)
async def question_8(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text="8 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 10\n\n"
                                                   "–ú—É–∫–æ–ª—ñ—Ç–∏–∫ —á–∏ –∞–Ω—Ç–∏–≥—ñ—Å—Ç–∞–º—ñ–Ω–Ω–∏–π –ø—Ä–µ–ø–∞—Ä–∞—Ç –º–æ–∂–Ω–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏ "
                                                   "–Ω–µ –±—ñ–ª—å—à–µ 14 –¥–Ω—ñ–≤.",
                           reply_markup=button.yes_no())
    await quest.next()


@dp.callback_query_handler(text='yes_yes', state=quest.q8)
async def question_8(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–ù–µ —Ç–∞–∫.\n'
                                                   f'–ù–∞–ø—Ä–∏–∫–ª–∞–¥ –∞–º–±—Ä–æ–∫—Å–æ–ª —ñ –ª–æ—Ä–∞—Ç–∞–¥–∏–Ω —î –Ω–µ –ª–∏—à–µ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–º–∏, '
                                                   f'–∞–ª–µ –π –±–µ–∑–ø–µ—á–Ω–∏–º–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞–º–∏, —É —Ç–æ–º—É —á–∏—Å–ª—ñ –ø—Ä–∏ —Ç—Ä–∏–≤–∞–ª–æ–º—É '
                                                   f'–∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—ñ. –¢–æ–π –∂–µ ¬´–†–µ—Å–ø–∏–∫—Å –õ¬ª –Ω–µ –º–∞—î –æ–±–º–µ–∂–µ–Ω—å —â–æ–¥–æ '
                                                   f'—Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ‚Äì –≤—Å–µ –ª—ñ–º—ñ—Ç—É—î—Ç—å—Å—è –ª–∏—à–µ '
                                                   f'—Å–∏–º–ø—Ç–æ–º–∞–º–∏ –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è.',
                           reply_markup=button.next())


@dp.callback_query_handler(text='nope', state=quest.q8)
async def question_8(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n'
                                                   f'–ê–¥–∂–µ ¬´–†–µ—Å–ø–∏–∫—Å –õ¬ª –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å '
                                                   f'—É —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ, –∞–¥–∂–µ —ñ –∞–º–±—Ä–æ–∫—Å–æ–ª, —ñ –ª–æ—Ä–∞—Ç–∞–¥–∏–Ω –¥–æ–≤–µ–¥–µ–Ω–æ '
                                                   f'–±–µ–∑–ø–µ—á–Ω—ñ –ø—Ä–∏ —Ç—Ä–∏–≤–∞–ª–æ–º—É –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—ñ.',
                           reply_markup=button.next())


# 8 –í–û–ü–†–û–°
# ******************************************************************************************************************
# 9 –í–û–ü–†–û–°


@dp.callback_query_handler(text='nxt', state=quest.q8)
async def question_9(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text="9 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 10\n\n"
                                                   "–ù–∞–∑–∞–ª—å–Ω—ñ –¥–µ–∫–æ–Ω–≥–µ—Å—Ç–∞–Ω—Ç–∏ –≤—ñ–¥–Ω–æ–≤–ª—é—é—Ç—å –Ω–æ—Å–æ–≤–µ –¥–∏—Ö–∞–Ω–Ω—è —Ç–∞ –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å "
                                                   "–ø–æ–∑–±–∞–≤–∏—Ç–∏—Å—å –≤—ñ–¥ —Å–ª–∏–∑—É",
                           reply_markup=button.yes_no())
    await quest.next()


@dp.callback_query_handler(text='yes_yes', state=quest.q9)
async def question_9(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–ù–∞—Å–ø—Ä–∞–≤–¥—ñ –Ω–µ –∑–∞–≤–∂–¥–∏.\n'
                                                   f'–ù–∞–ø—Ä–∏–∫–ª–∞–¥, –ø—Ä–∏ —Ä–∏–Ω–æ—Å–∏–Ω—É—Å–∏—Ç—ñ –≥—É—Å—Ç–∏–π, —ñ–Ω—Ñ—ñ–∫–æ–≤–∞–Ω–∏–π —Å–ª–∏–∑ '
                                                   f'–Ω–∞–∫–æ–ø–∏—á—É—î—Ç—å—Å—è —Ç–∞–∫–æ–∂ –≤ —Å–∏–Ω—É—Å–∞—Ö, –∞ —Ü—ñ –∑–∞—Å–æ–±–∏ –Ω–µ '
                                                   f'–ø–æ–ª–µ–≥—à—É—é—Ç—å –π–æ–≥–æ –≤–∏–≤–µ–¥–µ–Ω–Ω—è. –î–ª—è —Å–∞–Ω–∞—Ü—ñ—ó —Å–∏–Ω—É—Å—ñ–≤ '
                                                   f'—Å—É—á–∞—Å–Ω—ñ –≥–∞–π–¥–ª–∞–π–Ω–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—å –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏ '
                                                   f'—Ñ—ñ—Ç–æ–µ–∫—Å—Ç—Ä–∞–∫—Ç–∏ - —Ç–∞–∫—ñ, —è–∫—ñ –≤—Ö–æ–¥—è—Ç—å –¥–æ —Å–∫–ª–∞–¥—É ¬´–†–µ—Å–ø–∏–∫—Å –°–∏–Ω—É—Å¬ª.',
                           reply_markup=button.next())


@dp.callback_query_handler(text='nope', state=quest.q9)
async def question_9(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–¶–µ –ø—Ä–∞–≤–¥–∞!\n'
                                                   f'–ê–¥–∂–µ –Ω–∞–∫–æ–ø–∏—á–µ–Ω–Ω—è —Å–ª–∏–∑—É –≤—ñ–¥–±—É–≤–∞—î—Ç—å—Å—è —ñ –≤ –ø–æ—Ä–æ–∂–Ω–∏–Ω—ñ –Ω–æ—Å–∞, '
                                                   f'—ñ –≤ —Å–∏–Ω—É—Å–∞—Ö, –∞ –¥–µ–∫–æ–Ω–≥–µ—Å—Ç–∞–Ω—Ç–∏ –º–∞–ª–æ –≤–ø–ª–∏–≤–∞—é—Ç—å –Ω–∞ '
                                                   f'–π–æ–≥–æ –≤–∏–≤–µ–¥–µ–Ω–Ω—è. –í —Ç–∞–∫–∏—Ö –≤–∏–ø–∞–¥–∫–∞—Ö –¥–æ–ø–æ–º–∞–≥–∞—é—Ç—å '
                                                   f'—Ñ—ñ—Ç–æ–µ–∫—Å—Ç—Ä–∞–∫—Ç–∏. –°–∞–º–µ —Ç–∞–∫—ñ, —è–∫—ñ –º—ñ—Å—Ç—è—Ç—å—Å—è –≤ '
                                                   f'¬´–†–µ—Å–ø–∏–∫—Å –°–∏–Ω—É—Å¬ª. ',
                           reply_markup=button.next())


# 9 –í–û–ü–†–û–°
# ******************************************************************************************************************
# 10 –í–û–ü–†–û–°


@dp.callback_query_handler(text='nxt', state=quest.q9)
async def question_10(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text="10 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 10\n\n"
                                                   "–§—ñ—Ç–æ–ø—Ä–µ–ø–∞—Ä–∞—Ç–∏ –Ω–µ –º–∞—é—Ç—å –¥–æ–∫–∞–∑–æ–≤–æ—ó –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –ø—Ä–∏ —Ä–∏–Ω–æ—Å–∏–Ω—É—Å–∏—Ç–∞—Ö",
                           reply_markup=button.yes_no())
    await quest.next()


@dp.callback_query_handler(text='yes_yes', state=quest.q10)
async def question_10(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–©–µ –π —è–∫ –º–∞—é—Ç—å!\n'
                                                   f'–í—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ EPOS 2020 –ø–µ–ª–∞—Ä–≥–æ–Ω—ñ—è, '
                                                   f'—â–æ –≤—Ö–æ–¥–∏—Ç—å –¥–æ —Å–∫–ª–∞–¥—É ¬´–†–µ—Å–ø–∏–∫—Å –°–∏–Ω—É—Å¬ª, '
                                                   f'–º–∞—î –≤–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å –¥–æ–∫–∞–∑–æ–≤–æ—Å—Ç—ñ ‚Äì 1b. ',
                           reply_markup=button.end())


@dp.callback_query_handler(text='nope', state=quest.q10)
async def question_10(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–ê–±—Å–æ–ª—é—Ç–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n'
                                                   f'EPOS 2020 —Ä–µ–∫–æ–º–µ–Ω–¥—É—î –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ç—É –∂ '
                                                   f'—Ç–∞–∫–∏ –ø–µ–ª–∞—Ä–≥–æ–Ω—ñ—é, —â–æ –≤—Ö–æ–¥–∏—Ç—å –¥–æ —Å–∫–ª–∞–¥—É ¬´–†–µ—Å–ø–∏–∫—Å –°–∏–Ω—É—Å¬ª, '
                                                   f'–ø—Ä–∏ –ø–æ—Å—Ç–≤—ñ—Ä—É—Å–Ω–æ–º—É —Ä–∏–Ω–æ—Å–∏–Ω—É—Å–∏—Ç—ñ (—Ä—ñ–≤–µ–Ω—å –¥–æ–∫–∞–∑–æ–≤–æ—Å—Ç—ñ 1b).',
                           reply_markup=button.end())


# 10 –í–û–ü–†–û–°
# ******************************************************************************************************************
# –ö–û–ù–ï–¶. –ò–¢–û–ì–ò


@dp.callback_query_handler(text='endd', state=quest.q10)
async def back_end(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    async with state.proxy() as data:
        counter = data.get('points')
    db.update_point(call.from_user.id, counter)
    if counter == 0 or counter <= 4:
        await bot.send_photo(call.from_user.id,
                             photo=open(os.path.join(config.path_photo, 'COVER_PULMO_1.png'), 'rb'),
                             caption=f"{config.minimum}\n\n"
                                     f"–í–∞—à—ñ –±–∞–ª–∏: {counter}\n",
                             reply_markup=button.axxe(counter, config.minimum))
    elif counter >= 5 and counter <= 7:
        await bot.send_photo(call.from_user.id,
                             photo=open(os.path.join(config.path_photo, 'COVER_PULMO_2.png'), 'rb'),
                             caption=f"{config.medium}\n\n"
                                     f"–í–∞—à—ñ –±–∞–ª–∏: {counter}\n",
                             reply_markup=button.axxe(counter, config.medium))
    else:
        await bot.send_photo(call.from_user.id,
                             photo=open(os.path.join(config.path_photo, 'COVER_PULMO_3.png'), 'rb'),
                             caption=f"{config.maximum}\n\n"
                                     f"–í–∞—à—ñ –±–∞–ª–∏: {counter}\n",
                             reply_markup=button.axxe(counter, config.maximum))
    await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)
