import os
from sqlite3 import IntegrityError

import aiogram
from aiogram import Bot
from aiogram import types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardRemove
from aiogram.utils import executor

import button
import config
import db

storage = MemoryStorage()
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot, storage=storage)


async def on_startup(_):
    print('Bot activated')
    db.start_db()


class quest(StatesGroup):
    q1 = State()
    q2 = State()
    q3 = State()
    q4 = State()
    q5 = State()
    q6 = State()
    q7 = State()
    q8 = State()
    q9 = State()
    q10 = State()


class MassSend(StatesGroup):
    sendd = State()


@dp.message_handler(commands='start')
async def strt(message: types.Message):
    try:
        db.db_add(message.from_user.id, message.from_user.first_name, message.from_user.username)
    except IntegrityError:
        pass
    await bot.send_message(message.from_user.id, text="–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ!\n"
                                                      "–¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –∑—Ä–æ–∑—É–º—ñ—Ç–∏ –Ω–∞—Å–∫—ñ–ª—å–∫–∏ –≤–∏ –æ–±—ñ–∑–Ω–∞–Ω—ñ "
                                                      "—É —Ç–µ–º—ñ –∫–∞—à–ª—é —Ç–∞ –π–æ–≥–æ –ª—ñ–∫—É–≤–∞–Ω–Ω—ñ, –ø—Ä–æ–π–¥—ñ—Ç—å –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è —Ç–∞ "
                                                      "–¥—ñ–∑–Ω–∞—î—Ç–µ—Å—è —Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å –∑–Ω–∞–Ω—å —É —Ü—ñ–π —Ç–µ–º—ñ\n",
                           reply_markup=button.interview())

@dp.message_handler(commands="users")
async def usrs(message: types.Message):
    await bot.send_message(message.from_user.id, text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {len(db.all_user())}")

@dp.message_handler(commands='send', state=None)
async def snd(message: types.Message):


    if message.from_user.id not in config.ADMIN_ID:
        await bot.send_message(message.from_user.id, text="–í –î–û–°–¢–£–ü–Ü –í–Ü–î–ú–û–í–õ–ï–ù–û!")
    else:
        await bot.send_message(message.from_user.id, text=f"–ù–∞–ø–∏—à–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è "
                                                          f"—Ä–∞—Å—Å—ã–ª–∫–∏ –æ–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(db.all_user())} "
                                                          f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", reply_markup=button.cancel())
        await MassSend.sendd.set()

@dp.message_handler(text='–û–¢–ú–ï–ù–ê',state=MassSend.sendd)
async def cncl(message: types.Message, state: FSMContext):
    await state.finish()
    await bot.send_message(message.from_user.id, '–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=ReplyKeyboardRemove())

@dp.message_handler(content_types=aiogram.types.ContentType.ANY,
                    state=MassSend.sendd)
async def send(message: types.Message, state: FSMContext):
    good, bad = 0, 0
    await state.finish()
    errors_list = []
    for i in db.all_user():
        try:
            await bot.send_message(i[0], message.text)
            good += 1
        except Exception as e:
            bad += 1
            errors_list.append(e)
    await bot.send_message(message.from_user.id, '–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\n'
                                                 f'–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {good}\n'
                                                 f'–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {bad}\n'
                                                 f'–û—à–∏–±–∫–∏ {set(errors_list)}')


# ******************************************************************************************************************
# 1 –í–û–ü–†–û–°

@dp.callback_query_handler(text='start_again', state=None)
@dp.message_handler(text_startswith='–ü–æ—á–∞—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è', state=None)
async def question_1(message: types.Message):
    #    await db.start_num_db()
    #    await db.add_pnt(message.from_user.id)
    await quest.q1.set()
    await bot.send_message(message.from_user.id, '–î–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ 10 –ø–∏—Ç–∞–Ω—å —Ç–∞ –¥—ñ–∑–Ω–∞–π—Ç–µ—Å—è –Ω–∞—Å–∫—ñ–ª—å–∫–∏ –≤–∏ '
                                                 '–æ–±—ñ–∑–Ω–∞–Ω—ñ —É —Ç–µ–º—ñ –∫–∞—à–ª—é —Ç–∞ –π–æ–≥–æ –ª—ñ–∫—É–≤–∞–Ω–Ω—ñ ü§î',
                           reply_markup=ReplyKeyboardRemove())
    await bot.send_message(message.from_user.id, text="1 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 10\n\n"
                                                      "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∏–π –∫–∞—à–µ–ª—å –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î –ª—ñ–∫—É–≤–∞–Ω–Ω—è",
                           reply_markup=button.yes_no())


@dp.callback_query_handler(text='yes_yes', state=quest.q1)
async def question_1(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–©–µ –π —è–∫ –ø–æ—Ç—Ä–µ–±—É—î!\n'
                                                   f'–í–∞–∂–ª–∏–≤–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–≤–Ω–æ –µ–ª—ñ–º—ñ–Ω—É–≤–∞—Ç–∏ –º–æ–∫—Ä–æ—Ç–∏–Ω–Ω—è –∑ –Ω–∏–∂–Ω—ñ—Ö '
                                                   f'–¥–∏—Ö–∞–ª—å–Ω–∏—Ö —à–ª—è—Ö—ñ–≤. –ù–∞–π—á–∞—Å—Ç—ñ—à–µ –∑ —Ü—ñ—î—é –º–µ—Ç–æ—é –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å '
                                                   f'–ª—ñ–∫–∞—Ä—Å—å–∫—ñ –∑–∞—Å–æ–±–∏.',
                           reply_markup=button.next())


@dp.callback_query_handler(text='nope', state=quest.q1)
async def question_1(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–ê–±—Å–æ–ª—é—Ç–Ω–æ –≤—ñ—Ä–Ω–æ!\n'
                                                   f'–ú–æ–∫—Ä–æ—Ç–∏–Ω–Ω—è —Å–ª—ñ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–≤–Ω–æ –µ–ª—ñ–º—ñ–Ω—É–≤–∞—Ç–∏ –∑ –Ω–∞–π–¥—Ä—ñ–±–Ω—ñ—à–∏—Ö '
                                                   f'–±—Ä–æ–Ω—Ö—ñ–æ–ª —Ç–∞ –∞–ª—å–≤–µ–æ–ª. –ó —Ü—ñ—î—é –º–µ—Ç–æ—é –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ '
                                                   f'–ª—ñ–∫–∞—Ä—Å—å–∫—ñ –∑–∞—Å–æ–±–∏, —Ä—ñ–¥—à–µ ‚Äì –¥–∏—Ö–∞–ª—å–Ω—É —Ñ—ñ–∑—ñ–æ—Ç–µ—Ä–∞–ø—ñ—é '
                                                   f'(–ø–æ—Å—Ç—É—Ä–∞–ª—å–Ω–∏–π –¥—Ä–µ–Ω–∞–∂, —Ç–µ—Ö–Ω—ñ–∫–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–∞—à–ª—é —Ç–æ—â–æ). '
                                                   f'–Ü –Ω–µ –∑–∞–±—É–≤–∞—î–º–æ –∑–≤–æ–ª–æ–∂—É–≤–∞—Ç–∏ –ø–æ–≤—ñ—Ç—Ä—è —É –ø—Ä–∏–º—ñ—â–µ–Ω–Ω—ñ!',
                           reply_markup=button.next())
    await call.answer()


# 1 –í–û–ü–†–û–°
# ******************************************************************************************************************
# 2 –í–û–ü–†–û–°


@dp.callback_query_handler(text='nxt', state=quest.q1)
async def question_2(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f"2 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 10\n\n"
                                                   f"–ú—É–∫–æ–ª—ñ—Ç–∏—á–Ω–∞ —Ç–∞ –≤—ñ–¥—Ö–∞—Ä–∫—É–≤–∞–ª—å–Ω–∞ –¥—ñ—è ‚Äì —Ü–µ –æ–¥–Ω–µ –π —Ç–µ —Å–∞–º–µ",
                           reply_markup=button.yes_no())
    await quest.next()


@dp.callback_query_handler(text='yes_yes', state=quest.q2)
async def question_2(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–ó–æ–≤—Å—ñ–º –Ω–µ —Ç–∞–∫!\n'
                                                   f'–ú—É–∫–æ–ª—ñ—Ç–∏–∫–∏ (—Ç–∞–∫—ñ —è–∫ –∞–º–±—Ä–æ–∫—Å–æ–ª —Ç–∞ –∞—Ü–µ—Ç–∏–ª—Ü–∏—Å—Ç–µ—ó–Ω)'
                                                   f' —Ä–æ–∑—Ä—ñ–¥–∂—É—é—Ç—å –º–æ–∫—Ä–æ—Ç–∏–Ω–Ω—è, –∞–ª–µ –Ω–∞ –≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ –≤—ñ–¥—Ö–∞—Ä–∫—É–≤–∞–ª—å–Ω–∏—Ö '
                                                   f'–∑–∞—Å–æ–±—ñ–≤ –Ω–µ –∑–±—ñ–ª—å—à—É—é—Ç—å –π–æ–≥–æ –æ–±‚Äô—î–º. –î—ñ—è –≤—ñ–¥—Ö–∞—Ä–∫—É–≤–∞–ª—å–Ω–∏—Ö –∑–∞—Å–æ–±—ñ–≤ '
                                                   f'(–∑–∞–∑–≤–∏—á–∞–π —Ü–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∏ —Ä–æ—Å–ª–∏–Ω–Ω–æ–≥–æ –ø–æ—Ö–æ–¥–∂–µ–Ω–Ω—è ‚Äì —Ç—Ä–∞–≤–∞ —Ç–µ—Ä–º–æ–ø—Å–∏—Å—É,'
                                                   f' –Ω–∞–ø—Ä–∏–∫–ª–∞–¥) –∑–∞—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ –∑–±—ñ–ª—å—à–µ–Ω–Ω—è —Å–µ–∫—Ä–µ—Ü—ñ—ó –∑–∞–ª–æ–∑ '
                                                   f'(—É —Ç.—á. –±—Ä–æ–Ω—Ö—ñ–∞–ª—å–Ω–∏—Ö, –∑–∞–ª–æ–∑ –®–ö–¢, –õ–û–†-–æ—Ä–≥–∞–Ω—ñ–≤ —Ç–æ—â–æ). '
                                                   f'–¢–æ–º—É —ó—Ö –Ω–µ –≤–∞—Ä—Ç–æ –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏ –ø—Ä–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–º—É –∫–∞—à–ª—é, –Ω–µ–∂–∏—Ç—ñ, '
                                                   f'–∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è—Ö –®–ö–¢, –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω–∏—Ö –ø–æ—Ä—É—à–µ–Ω–Ω—è—Ö —Ç–æ—â–æ. –ö—Ä—ñ–º —Ç–æ–≥–æ, '
                                                   f'—É –≤–∏—Å–æ–∫—ñ–π –¥–æ–∑—ñ —Ü—ñ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∏ –≤–∏–∫–ª–∏–∫–∞—é—Ç—å –±–ª—é–≤–æ—Ç—É.',
                           reply_markup=button.next())


@dp.callback_query_handler(text='nope', state=quest.q2)
async def question_2(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–î—ñ–π—Å–Ω–æ!\n–ú—É–∫–æ–ª—ñ—Ç–∏–∫–∏ —Ç–∞ –≤—ñ–¥—Ö–∞—Ä–∫—É–≤–∞–ª—å–Ω—ñ –∑–∞—Å–æ–±–∏ (–µ–∫—Å–ø–µ–∫—Ç–æ—Ä–∞–Ω—Ç–∏) ‚Äì —Ü–µ '
                                                   f'—Ä—ñ–∑–Ω—ñ –ª—ñ–∫–∞—Ä—Å—å–∫—ñ –∑–∞—Å–æ–±–∏. –°–ø—Ä–∞–≤–∂–Ω—ñ –º—É–∫–æ–ª—ñ—Ç–∏–∫–∏ '
                                                   f'(–∞–º–±—Ä–æ–∫—Å–æ–ª, –∞—Ü–µ—Ç–∏–ª—Ü–∏—Å—Ç–µ—ó–Ω) —Ä–æ–∑—Ä—ñ–¥–∂—É—é—Ç—å –º–æ–∫—Ä–æ—Ç–∏–Ω–Ω—è, '
                                                   f'–ø–æ–ª–µ–≥—à—É—é—á–∏ —Ç–∏–º —Å–∞–º–∏–º –π–æ–≥–æ –≤—ñ–¥—Ö–æ–¥–∂–µ–Ω–Ω—è. '
                                                   f'–í—ñ–¥—Ö–∞—Ä–∫—É–≤–∞–ª—å–Ω—ñ –∂ –∑–∞—Å–æ–±–∏ –≤–∏–∫–ª–∏–∫–∞—é—Ç—å –∑–±—ñ–ª—å—à–µ–Ω–Ω—è –æ–±‚Äô—î–º—É —Å–ª–∏–∑—É, '
                                                   f'–ø—Ä–∏ —Ü—å–æ–º—É –∑–º–µ–Ω—à—É—î—Ç—å—Å—è –≤‚Äô—è–∑–∫—ñ—Å—Ç—å –º–æ–∫—Ä–æ—Ç–∏–Ω–Ω—è, '
                                                   f'—â–æ —Å—Ç–∏–º—É–ª—é—î –∫–∞—à–ª—å–æ–≤–∏–π —Ä–µ—Ñ–ª–µ–∫—Å.',
                           reply_markup=button.next())


# 2 –í–û–ü–†–û–°
# ******************************************************************************************************************
# 3 –í–û–ü–†–û–°


@dp.callback_query_handler(text='nxt', state=quest.q2)
async def question_3(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text="3 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 10\n\n"
                                                   "–§–∞—Ä–º–∞–∫–æ–ª–æ–≥—ñ—á–Ω—ñ –µ—Ñ–µ–∫—Ç–∏ –∞–º–±—Ä–æ–∫—Å–æ–ª—É –Ω–µ –æ–±–º–µ–∂—É—é—Ç—å—Å—è –≤–∏–∫–ª—é—á–Ω–æ "
                                                   "–π–æ–≥–æ –≤–ø–ª–∏–≤–æ–º –Ω–∞ –≤‚Äô—è–∑–∫—ñ—Å—Ç—å –º–æ–∫—Ä–æ—Ç–∏–Ω–Ω—è (–º—É–∫–æ–ª—ñ—Ç–∏—á–Ω–æ—é –¥—ñ—î—é)",
                           reply_markup=button.yes_no())
    await quest.next()


@dp.callback_query_handler(text='yes_yes', state=quest.q3)
async def question_3(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–¶–µ –ø—Ä–∞–≤–¥–∞!\n'
                                                   f'–ê–º–±—Ä–æ–∫—Å–æ–ª –Ω–µ –ª–∏—à–µ —Ä–æ–∑—Ä—ñ–¥–∂—É—î –º–æ–∫—Ä–æ—Ç–∏–Ω–Ω—è, '
                                                   f'–≤–∏—è–≤–ª—è—é—á–∏ —Ç–∏–º —Å–∞–º–∏–º –º—É–∫–æ–ª—ñ—Ç–∏—á–Ω—É –¥—ñ—é, '
                                                   f'–∞–ª–µ –π —Å—Ç–∏–º—É–ª—é—î —ó—ó –≤–∏–≤–µ–¥–µ–Ω–Ω—è, '
                                                   f'–≤—ñ–¥–Ω–æ–≤–ª—é—î —Å–∞–Ω–∞—Ü—ñ—é –¥–∏—Ö–∞–ª—å–Ω–∏—Ö —à–ª—è—Ö—ñ–≤ –≤—ñ–¥ —ñ–Ω—Ñ—ñ–∫–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ª–∏–∑—É, '
                                                   f'—á–∏–Ω–∏—Ç—å –ø—Ä–æ—Ç–∏–∑–∞–ø–∞–ª—å–Ω—É, —ñ–º—É–Ω–æ–º–æ–¥—É–ª—é—é—á—É —Ç–∞ –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç–Ω—É –¥—ñ—é. '
                                                   f'–û—Å–æ–±–ª–∏–≤–æ —Ü—ñ–∫–∞–≤–æ—é —î –≤–∏—Ä–∞–∑–Ω–∞ –º—ñ—Å—Ü–µ–≤–∞ –∑–Ω–µ–±–æ–ª—é–≤–∞–ª—å–Ω–∞ –¥—ñ—è –∞–º–±—Ä–æ–∫—Å–æ–ª—É! '
                                                   f'–Ñ –Ω–∞–≤—ñ—Ç—å —ñ–Ω–Ω–æ–≤–∞—Ü—ñ–π–Ω–∞ —Ñ–æ—Ä–º–∞ –∑ –≤–∏—Å–æ–∫–∏–º –≤–º—ñ—Å—Ç–æ–º –∞–º–±—Ä–æ–∫—Å–æ–ª—É, '
                                                   f'—â–æ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ —É—Å—É–≤–∞—î –±—ñ–ª—å —É –≥–æ—Ä–ª—ñ ‚Äì ¬´–†–µ—Å–ø–∏–∫—Å –°–ø—Ä–µ–π¬ª.',
                           reply_markup=button.next())


@dp.callback_query_handler(text='nope', state=quest.q3)
async def question_3(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–î—É–∂–µ –Ω–∞–≤—ñ—Ç—å –Ω–µ –æ–±–º–µ–∂—É—î—Ç—å—Å—è!\n'
                                                   f'–§–∞—Ä–º–∞–∫–æ–¥–∏–Ω–∞–º—ñ–∫–∞ –∞–º–±—Ä–æ–∫—Å–æ–ª—É –Ω–∞—Å–ø—Ä–∞–≤–¥—ñ –¥–æ—Å–∏—Ç—å –æ–±—à–∏—Ä–Ω–∞: '
                                                   f'–æ–∫—Ä—ñ–º –º—É–∫–æ–ª—ñ—Ç–∏—á–Ω–æ—ó –¥—ñ—ó –π–æ–º—É –ø—Ä–∏—Ç–∞–º–∞–Ω–Ω—ñ —â–µ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –º—É–∫–æ–∫—ñ–Ω–µ—Ç–∏–∫–∞,'
                                                   f' –ø—Ä–æ—Ç–∏–∑–∞–ø–∞–ª—å–Ω—ñ —ñ–º—É–Ω–æ—Ç—Ä–æ–ø–Ω—ñ, –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ, '
                                                   f'–∞ —Ç–∞–∫–æ–∂ ‚Äì —É—è–≤—ñ—Ç—å —Å–æ–±—ñ ‚Äì –º—ñ—Å—Ü–µ–≤–æ–∞–Ω–µ—Å—Ç–µ–∑—É–≤–∞–ª—å–Ω–∞ –¥—ñ—è! '
                                                   f'–°–∞–º–µ —Ü—è –¥—ñ—è –Ω–∞–π–±—ñ–ª—å—à –≤–∏—Ä–∞–∑–Ω–æ –ø—Ä–æ—è–≤–ª—è—î—Ç—å—Å—è —É ¬´–†–µ—Å–ø–∏–∫—Å –°–ø—Ä–µ—é¬ª ‚Äì '
                                                   f'—ñ–Ω–Ω–æ–≤–∞—Ü—ñ–π–Ω—ñ–π –ª—ñ–∫–∞—Ä—Å—å–∫–∏–π —Ñ–æ—Ä–º—ñ –∞–º–±—Ä–æ–∫—Å–æ–ª—É –¥–ª—è –º—ñ—Å—Ü–µ–≤–æ–≥–æ –ª—ñ–∫—É–≤–∞–Ω–Ω—è '
                                                   f'–≤–∏—Ä–∞–∑–Ω–æ–≥–æ –±–æ–ª—é –≤ –≥–æ—Ä–ª—ñ. ',
                           reply_markup=button.next())


# 3 –í–û–ü–†–û–°
# ******************************************************************************************************************
# 4 –í–û–ü–†–û–°


@dp.callback_query_handler(text='nxt', state=quest.q3)
async def question_4(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text="4 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 10\n\n"
                                                   "–ê–º–±—Ä–æ–∫—Å–æ–ª –Ω–µ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–∏–π –∑–∞ –≤—ñ–¥–æ–º—ñ –º—ñ—Å—Ü–µ–≤—ñ –∞–Ω–µ—Å—Ç–µ—Ç–∏–∫–∏,"
                                                   " –∑–æ–∫—Ä–µ–º–∞, –ª—ñ–¥–æ–∫–∞—ó–Ω",
                           reply_markup=button.yes_no())
    await quest.next()


@dp.callback_query_handler(text='yes_yes', state=quest.q4)
async def question_4(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–£—è–≤—ñ—Ç—å —Å–æ–±—ñ, –∞–ª–µ –Ω—ñ!\n'
                                                   f'–õ—ñ–¥–æ–∫–∞—ó–Ω —É 39 —Ä–∞–∑—ñ–≤ –ø–æ—Å—Ç—É–ø–∞—î—Ç—å—Å—è –∞–º–±—Ä–æ–∫—Å–æ–ª—É —É –≤–∏—Ä–∞–∑–Ω–æ—Å—Ç—ñ '
                                                   f'–∑–Ω–µ–±–æ–ª—é–≤–∞–ª—å–Ω–æ—ó –¥—ñ—ó ‚Äì –¥–æ–≤–µ–¥–µ–Ω–æ –Ω–∞—É–∫–æ–≤–∏–º–∏ –¥–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è–º–∏.',
                           reply_markup=button.next())


@dp.callback_query_handler(text='nope', state=quest.q4)
async def question_4(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–î—ñ–π—Å–Ω–æ!\n'
                                                   f'–î–æ—Å–ª—ñ–¥–∂–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é—Ç—å, —â–æ –∞–º–±—Ä–æ–∫—Å–æ–ª –∑–Ω–∞—á–Ω–æ –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—à–∏–π '
                                                   f'–º—ñ—Å—Ü–µ–≤–∏–π –∞–Ω–µ—Å—Ç–µ—Ç–∏–∫, –∞–Ω—ñ–∂ –ª—ñ–¥–æ–∫–∞—ó–Ω. –ö—Ä—ñ–º —Ç–æ–≥–æ, '
                                                   f'–º—ñ—Å—Ü–µ–≤–∞ –∑–Ω–µ–±–æ–ª—é–≤–∞–ª—å–Ω–∞ –¥—ñ—è –∞–º–±—Ä–æ–∫—Å–æ–ª—É, '
                                                   f'–Ω–∞ –≤—ñ–¥–º—ñ–Ω—É –≤—ñ–¥ –ª—ñ–¥–æ–∫–∞—ó–Ω—É —á–∏ –±–µ–Ω–∑–æ–∫–∞—ó–Ω—É, '
                                                   f'–Ω–µ —Å—É–ø—Ä–æ–≤–æ–¥–∂—É—î—Ç—å—Å—è –≤—ñ–¥—á—É—Ç—Ç—è–º –æ–Ω—ñ–º—ñ–Ω–Ω—è —Ç–∞ –ø–æ—Ä—É—à–µ–Ω–Ω—è–º —Å–º–∞–∫—É ‚Äì '
                                                   f'–∞ –≤—Å–µ —á–µ—Ä–µ–∑ –≤–∏–±—ñ—Ä–∫–æ–≤–∏–π –≤–ø–ª–∏–≤ –Ω–∞ –±–µ–∑–º—ñ—î–ª—ñ–Ω–æ–≤—ñ –Ω–µ—Ä–≤–æ–≤—ñ –≤–æ–ª–æ–∫–Ω–∞, '
                                                   f'—â–æ –ø—Ä–æ–≤–æ–¥—è—Ç—å –±–æ–ª—å–æ–≤—ñ —ñ–º–ø—É–ª—å—Å–∏!',
                           reply_markup=button.next())


# 4 –í–û–ü–†–û–°
# ******************************************************************************************************************
# 5 –í–û–ü–†–û–°


@dp.callback_query_handler(text='nxt', state=quest.q4)
async def question_5(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text="5 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 10\n\n"
                                                   "–ü—Ä–µ–ø–∞—Ä–∞—Ç–∏ –∞–º–±—Ä–æ–∫—Å–æ–ª—É –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ —É –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—ñ —ñ–Ω—Ñ—ñ–∫—É–≤–∞–Ω–Ω—é "
                                                   "SARS-nCoV-2",
                           reply_markup=button.yes_no())
    await quest.next()


@dp.callback_query_handler(text='yes_yes', state=quest.q5)
async def question_5(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–ü—Ä–∞–≤–¥–∞!\n'
                                                   f'–ê–º–±—Ä–æ–∫—Å–æ–ª –¥–æ–≤–µ–¥–µ–Ω–æ —ñ–Ω–≥—ñ–±—É—î –≤–∑–∞—î–º–æ–¥—ñ—é –º—ñ–∂ —Å–ø–∞–π–∫–æ–≤–∏–º –±—ñ–ª–∫–æ–º –≤—ñ—Ä—É—Å—É '
                                                   f'—Ç–∞ –∑–≤‚Äô—è–∑—É–≤–∞–ª—å–Ω–∏–º –¥–æ–º–µ–Ω–æ–º —Ä–µ—Ü–µ–ø—Ç–æ—Ä–∞ –ê–ü–§-2, —Ç–∏–º —Å–∞–º–∏–º –ø–µ—Ä–µ—à–∫–æ–¥–∂–∞—é—á–∏ '
                                                   f'–ø—Ä–æ–Ω–∏–∫–Ω–µ–Ω–Ω—é –∑–±—É–¥–Ω–∏–∫–∞ –¥–æ –∫–ª—ñ—Ç–∏–Ω —Ä–µ—Å–ø—ñ—Ä–∞—Ç–æ—Ä–Ω–æ–≥–æ —Ç—Ä–∞–∫—Ç—É –ª—é–¥–∏–Ω–∏. '
                                                   f'–ê–Ω–∞–ª–æ–≥—ñ—á–Ω–∏–π –µ—Ñ–µ–∫—Ç, –¥–æ —Ä–µ—á—ñ, –ø—Ä–∏—Ç–∞–º–∞–Ω–Ω–∏–π –≥–ª—ñ—Ü–∏—Ä–∏–∑–∏–Ω—É, –∞–º–æ–Ω—ñ—î–≤–∞ '
                                                   f'—Å—ñ–ª—å —è–∫–æ–≥–æ —Ä–∞–∑–æ–º —ñ–∑ –≤–ª–∞—Å–Ω–µ —Å–∞–º–∏–º –∞–º–±—Ä–æ–∫—Å–æ–ª–æ–º –≤—Ö–æ–¥–∏—Ç—å –¥–æ —Å–∫–ª–∞–¥—É '
                                                   f'¬´–†–µ—Å–ø–∏–∫—Å –°–ø—Ä–µ—é¬ª.',
                           reply_markup=button.next())


@dp.callback_query_handler(text='nope', state=quest.q5)
async def question_5(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–î—É–∂–µ –Ω–∞–≤—ñ—Ç—å –∑–¥–∞—Ç–Ω—ñ!\n'
                                                   f'–ê–º–±—Ä–æ–∫—Å–æ–ª —Å–∞–º –ø–æ —Å–æ–±—ñ –∑–¥–∞—Ç–Ω–∏–π –∑–∞–ø–æ–±—ñ–≥–∞—Ç–∏ –ø—Ä–æ–Ω–∏–∫–Ω–µ–Ω–Ω—é –≤—ñ—Ä—É—Å—É –¥–æ '
                                                   f'–∫–ª—ñ—Ç–∏–Ω –¥–∏—Ö–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–∞–∫—Ç—É –ª—é–¥–∏–Ω–∏. –ö—Ä—ñ–º —Ç–æ–≥–æ, —Ç–∞–∫–∏–π —Å–∞–º–µ –µ—Ñ–µ–∫—Ç '
                                                   f'–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —ñ –¥–ª—è –≥–ª—ñ—Ü–∏—Ä–∏–∑–∏–Ω—É ‚Äì –¥–æ–ø–æ–º—ñ–∂–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É '
                                                   f'¬´–†–µ—Å–ø–∏–∫—Å –°–ø—Ä–µ—é¬ª.',
                           reply_markup=button.next())


# 5 –í–û–ü–†–û–°
# ******************************************************************************************************************
# 6 –í–û–ü–†–û–°


@dp.callback_query_handler(text='nxt', state=quest.q5)
async def question_6(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text="6 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 10\n\n"
                                                   "–Ø–∫—â–æ –∞–º–±—Ä–æ–∫—Å–æ–ª —ñ –∞—Ü–µ—Ç–∏–ª—Ü–∏—Å—Ç–µ—ó–Ω –º–∞—é—Ç—å –º—É–∫–æ–ª—ñ—Ç–∏—á–Ω–∏–π –µ—Ñ–µ–∫—Ç, "
                                                   "–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —ó—Ö –æ–¥–Ω–æ—á–∞—Å–Ω–æ –Ω–µ–¥–æ—Ü—ñ–ª—å–Ω–æ ",
                           reply_markup=button.yes_no())
    await quest.next()


@dp.callback_query_handler(text='yes_yes', state=quest.q6)
async def question_6(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–¶–µ –Ω–µ —Ç–∞–∫.\n'
                                                   f'–ê–º–±—Ä–æ–∫—Å–æ–ª —ñ –∞—Ü–µ—Ç–∏–ª—Ü–∏—Å—Ç–µ—ó–Ω –º–∞—é—Ç—å —Ä—ñ–∑–Ω—É —Ñ–∞—Ä–º–∞–∫–æ–¥–∏–Ω–∞–º—ñ–∫—É –Ω–∞ —Å–ª–∏–∑: '
                                                   f'–∞—Ü–µ—Ç–∏–ª—Ü–∏—Å—Ç–µ—ó–Ω (—è–∫ –ø—Ä—è–º–∏–π –º—É–∫–æ–ª—ñ—Ç–∏–∫) —à–≤–∏–¥–∫–æ —Ä–æ–∑—Ä—ñ–¥–∂—É—î –º–æ–∫—Ä–æ—Ç–∏–Ω–Ω—è, '
                                                   f'–∞ –∞–º–±—Ä–æ–∫—Å–æ–ª (—è–∫ –º—É–∫–æ–∫—ñ–Ω–µ—Ç—ñ–∫) –∑–∞–±–µ–∑–ø–µ—á—É—î –π–æ–≥–æ –≤–∏–≤–µ–¥–µ–Ω–Ω—è '
                                                   f'–≤–ø—Ä–æ–¥–æ–≤–∂ –ø—ñ–≤–¥–æ–±–∏. –¢–æ–º—É —ó—Ö —Å–ø—ñ–ª—å–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —î —Ü—ñ–ª–∫–æ–º '
                                                   f'–≤–∏–ø—Ä–∞–≤–¥–∞–Ω–∏–º. –û—Å—å –Ω–∞–≤—ñ—Ç—å –ª—ñ–∫–∞—Ä—Å—å–∫–∏–π –∑–∞—Å—ñ–± –∑ —Ç–∞–∫–æ—é –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—î—é —î ‚Äì '
                                                   f'—Ç–∞–±–ª–µ—Ç–∫–∏ ¬´–†–µ—Å–ø–∏–∫—Å¬ª.',
                           reply_markup=button.next())


@dp.callback_query_handler(text='nope', state=quest.q6)
async def question_6(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–¢–æ—á–Ω–æ!\n'
                                                   f'–¢–∞–∫, –∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∞–º–±—Ä–æ–∫—Å–æ–ª—É —ñ –∞—Ü–µ—Ç–∏–ª—Ü–∏—Å—Ç–µ—ó–Ω—É —î '
                                                   f'–¥–æ—Ü—ñ–ª—å–Ω–∏–º, –∞–¥–∂–µ —Ü—ñ –º—É–∫–æ–ª—ñ—Ç–∏–∫–∏ –≤–ø–ª–∏–≤–∞—é—Ç—å –Ω–∞ —Ä—ñ–∑–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ '
                                                   f'–º–æ–∫—Ä–æ—Ç–∏–Ω–Ω—è: –∞—Ü–µ—Ç–∏–ª—Ü–∏—Å—Ç–µ—ó–Ω —è–∫ –ø—Ä—è–º–∏–π –º—É–∫–æ–ª—ñ—Ç–∏–∫ —à–≤–∏–¥–∫–æ –∑–º–µ–Ω—à—É—î '
                                                   f'–≤‚Äô—è–∑–∫—ñ—Å—Ç—å –º–æ–∫—Ä–æ—Ç–∏–Ω–Ω—è (—à–ª—è—Ö–æ–º –ø–æ—Ä—É—à–µ–Ω–Ω—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–∏—Å—É–ª—å—Ñ—ñ–¥–Ω–∏—Ö '
                                                   f'–∑–≤‚Äô—è–∑–∫—ñ–≤ —Å–ª–∏–∑—É), –∞–ª–µ –∑–∞–ª–∏—à–∞—î —Ü—é —Ä–æ–∑—Ä—ñ–¥–∂–µ–Ω—É —Å–ª–∏–∑ –≤ –¥–∏—Ö–∞–ª—å–Ω–∏—Ö '
                                                   f'—à–ª—è—Ö–∞—Ö. –ù–∞—Ç–æ–º—ñ—Å—Ç—å –∞–º–±—Ä–æ–∫—Å–æ–ª —Å—Ç–∏–º—É–ª—é—î —Ä—É—Ö–ª–∏–≤—ñ—Å—Ç—å –≤—ñ–π–æ–∫ '
                                                   f'–º–∏–≥–æ—Ç–ª–∏–≤–æ–≥–æ –µ–ø—ñ—Ç–µ–ª—ñ—é, –ø—Ä–∏—Å–∫–æ—Ä—é—é—á–∏ —Å–∞–Ω–∞—Ü—ñ—é –¥–∏—Ö–∞–ª—å–Ω–∏—Ö —à–ª—è—Ö—ñ–≤ '
                                                   f'–≤—ñ–¥ —Å–ª–∏–∑—É. –°–∞–º–µ —Ç–∞–∫–∞ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è –≤—Ö–æ–¥–∏—Ç—å –¥–æ —Å–∫–ª–∞–¥—É —Ç–∞–±–ª–µ—Ç–æ–∫ '
                                                   f'¬´–†–µ—Å–ø–∏–∫—Å¬ª. –á—Ö –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–Ω–∞—á–Ω–æ –ø–æ—Å–∏–ª—é—î –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å '
                                                   f'–ª—ñ–∫—É–≤–∞–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–∞—à–ª—é.',
                           reply_markup=button.next())


# 6 –í–û–ü–†–û–°
# ******************************************************************************************************************
# 7 –í–û–ü–†–û–°


@dp.callback_query_handler(text='nxt', state=quest.q6)
async def question_7(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text="7 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 10\n\n"
                                                   "–ú—É–∫–æ–ª—ñ—Ç–∏–∫–∏ –¥–æ—Ü—ñ–ª—å–Ω–æ –∫–æ–º–±—ñ–Ω—É–≤–∞—Ç–∏ –∑ –∞–Ω—Ç–∏–≥—ñ—Å—Ç–∞–º—ñ–Ω–Ω–∏–º–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞–º–∏",
                           reply_markup=button.yes_no())
    await quest.next()


@dp.callback_query_handler(text='yes_yes', state=quest.q7)
async def question_7(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–¶–µ –ø—Ä–∞–≤–¥–∞!\n'
                                                   f'–¢–∞–∫—ñ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—ó —î –¥–æ–±—Ä–µ –≤—ñ–¥–æ–º–∏–º–∏ ‚Äì –∑–æ–∫—Ä–µ–º–∞, '
                                                   f'–∞–º–±—Ä–æ–∫—Å–æ–ª —Ä–∞–∑–æ–º –∑ –ª–æ—Ä–∞—Ç–∞–¥–∏–Ω–æ–º –≤—Ö–æ–¥–∏—Ç—å –¥–æ —Å–∫–ª–∞–¥—É –ø—Ä–µ–ø–∞—Ä–∞—Ç—É '
                                                   f'¬´–†–µ—Å–ø–∏–∫—Å –õ¬ª, —â–æ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø–æ–ª–µ–≥—à—É—î –∫–∞—à–µ–ª—å, '
                                                   f'—è–∫–∏–π —Å—É–ø—Ä–æ–≤–æ–¥–∂—É—î—Ç—å—Å—è –∞–ª–µ—Ä–≥—ñ—á–Ω–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º '
                                                   f'(–π–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∏ ‚Äì —Ü–µ –∑–∞–∫–ª–∞–¥–µ–Ω—ñ—Å—Ç—å –Ω–æ—Å–∞, '
                                                   f'—Ä–∏–Ω–æ—Ä–µ—è –∞–±–æ –±—Ä–æ–Ω—Ö–æ—Å–ø–∞–∑–º–æ–º ‚Äì –∂–æ—Ä—Å—Ç–∫–µ –¥–∏—Ö–∞–Ω–Ω—è –ø—Ä–∏ –∞—É—Å–∫—É–ª—å—Ç–∞—Ü—ñ—ó).',
                           reply_markup=button.next())


@dp.callback_query_handler(text='nope', state=quest.q7)
async def question_7(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–ù–∞—Å–ø—Ä–∞–≤–¥—ñ –¥–æ—Ü—ñ–ª—å–Ω–æ!\n'
                                                   f'–ö–æ–º–±—ñ–Ω–∞—Ü—ñ—è –º—É–∫–æ–ª—ñ—Ç–∏–∫–∞ –∞–º–±—Ä–æ–∫—Å–æ–ª—É —Ç–∞ –±–ª–æ–∫–∞—Ç–æ—Ä–∞ –ù1-–≥—ñ—Å—Ç–∞–º—ñ–Ω–æ–≤–∏—Ö '
                                                   f'—Ä–µ—Ü–µ–ø—Ç–æ—Ä—ñ–≤ –ª–æ—Ä–∞—Ç–∞–¥–∏–Ω—É, —â–æ –≤—Ö–æ–¥–∏—Ç—å –¥–æ —Å–∫–ª–∞–¥—É –ø—Ä–µ–ø–∞—Ä–∞—Ç—É ¬´–†–µ—Å–ø–∏–∫—Å –õ¬ª, '
                                                   f'—î –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—é —É —Å–∏–º–ø—Ç–æ–º–∞—Ç–∏—á–Ω–æ–º—É –ª—ñ–∫—É–≤–∞–Ω–Ω—ñ –∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω—å –¥–∏—Ö–∞–ª—å–Ω–∏—Ö '
                                                   f'—à–ª—è—Ö—ñ–≤ –∑ –∞–ª–µ—Ä–≥—ñ—á–Ω–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º, —â–æ –ø–æ–≤‚Äô—è–∑–∞–Ω—ñ –∑ –ø–æ—Ä—É—à–µ–Ω–Ω—è–º '
                                                   f'–±—Ä–æ–Ω—Ö—ñ–∞–ª—å–Ω–æ—ó —Å–µ–∫—Ä–µ—Ü—ñ—ó —Ç–∞ –æ—Å–ª–∞–±–ª–µ–Ω–Ω—è–º –ø—Ä–æ—Å—É–≤–∞–Ω–Ω—è —Å–ª–∏–∑—É.',
                           reply_markup=button.next())


# 7 –í–û–ü–†–û–°
# ******************************************************************************************************************
# 8 –í–û–ü–†–û–°


@dp.callback_query_handler(text='nxt', state=quest.q7)
async def question_8(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text="8 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 10\n\n"
                                                   "–ö—É—Ä—Å –ª—ñ–∫—É–≤–∞–Ω–Ω—è –∫–æ–º–±—ñ–Ω–æ–≤–∞–Ω–∏–º –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–º –∞–º–±—Ä–æ–∫—Å–æ–ª—É –∑ –ª–æ—Ä–∞—Ç–∞–¥–∏–Ω–æ–º "
                                                   "–ø–æ–≤–∏–Ω–µ–Ω —Å–∫–ª–∞–¥–∞—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ 14 –¥–Ω—ñ–≤",
                           reply_markup=button.yes_no())
    await quest.next()


@dp.callback_query_handler(text='yes_yes', state=quest.q8)
async def question_8(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–ù–µ —Ç–∞–∫.\n'
                                                   f'–Ø–∫ –∞–º–±—Ä–æ–∫—Å–æ–ª, —Ç–∞–∫ —ñ –ª–æ—Ä–∞—Ç–∞–¥–∏–Ω —î –Ω–µ –ª–∏—à–µ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∏–º–∏, '
                                                   f'–∞–ª–µ –π –±–µ–∑–ø–µ—á–Ω–∏–º–∏ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞–º–∏, —É —Ç–æ–º—É —á–∏—Å–ª—ñ –ø—Ä–∏ —Ç—Ä–∏–≤–∞–ª–æ–º—É '
                                                   f'–∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—ñ. –¢–æ–π –∂–µ ¬´–†–µ—Å–ø–∏–∫—Å –õ¬ª –Ω–µ –º–∞—î –æ–±–º–µ–∂–µ–Ω—å —â–æ–¥–æ '
                                                   f'—Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ‚Äì –≤—Å–µ –ª—ñ–º—ñ—Ç—É—î—Ç—å—Å—è –ª–∏—à–µ —Å–∏–º–ø—Ç–æ–º–∞–º–∏ '
                                                   f'–∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è.',
                           reply_markup=button.next())


@dp.callback_query_handler(text='nope', state=quest.q8)
async def question_8(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–ü—Ä–∞–≤–∏–ª—å–Ω–æ!\n'
                                                   f'¬´–†–µ—Å–ø–∏–∫—Å –õ¬ª –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å —É —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ, '
                                                   f'–∞–¥–∂–µ —ñ –∞–º–±—Ä–æ–∫—Å–æ–ª, —ñ –ª–æ—Ä–∞—Ç–∞–¥–∏–Ω –¥–æ–≤–µ–¥–µ–Ω–æ –±–µ–∑–ø–µ—á–Ω—ñ –ø—Ä–∏ —Ç—Ä–∏–≤–∞–ª–æ–º—É '
                                                   f'–∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—ñ.',
                           reply_markup=button.next())


# 8 –í–û–ü–†–û–°
# ******************************************************************************************************************
# 9 –í–û–ü–†–û–°


@dp.callback_query_handler(text='nxt', state=quest.q8)
async def question_9(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text="9 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 10\n\n"
                                                   "–ö–∞—à–µ–ª—å –º–æ–∂–µ —Å—É–ø—Ä–æ–≤–æ–¥–∂—É–≤–∞—Ç–∏ —Ä–∏–Ω–æ—Å–∏–Ω—É—Å–∏—Ç–∏",
                           reply_markup=button.yes_no())
    await quest.next()


@dp.callback_query_handler(text='yes_yes', state=quest.q9)
async def question_9(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–¶–µ –ø—Ä–∞–≤–¥–∞!\n'
                                                   f'–ê –≤—Å—å–æ–º—É –≤–∏–Ω–æ—é —Å–∏–Ω–¥—Ä–æ–º –ø–æ—Å—Ç–Ω–∞–∑–∞–ª—å–Ω–æ–≥–æ –∑–∞—Ç—ñ–∫–∞–Ω–Ω—è. '
                                                   f'–¢–æ–º—É –¥—É–∂–µ –≤–∞–∂–ª–∏–≤–æ –ø—ñ–¥—Ö–æ–¥–∏—Ç–∏ –¥–æ –ø—Ä–æ–±–ª–µ–º–∏ –∫–∞—à–ª—é –≤–¥—É–º–ª–∏–≤–æ '
                                                   f'—Ç–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ ‚Äì –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –π–æ–≥–æ –ø—Ä–∏—á–∏–Ω—É —Ç–∞ –æ–±—Ä–∞—Ç–∏ '
                                                   f'–æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –ª—ñ–∫—É–≤–∞–Ω–Ω—è. –î–ª—è —Ç–∞–∫–æ–≥–æ –ø–∞—Ü—ñ—î–Ω—Ç–∞ –Ω–∞–π–∫—Ä–∞—â–æ—é '
                                                   f'—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—î—é –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è ¬´–†–µ—Å–ø–∏–∫—Å¬ª —Ç–∞–±–ª–µ—Ç–æ–∫ —Ä–∞–∑–æ–º –∑ '
                                                   f'–∫–æ–º–ø–ª–µ–∫—Å–æ–º —Ñ—ñ—Ç–æ–µ–∫—Å—Ç—Ä–∞–∫—Ç—ñ–≤ ¬´–†–µ—Å–ø–∏–∫—Å –°–∏–Ω—É—Å¬ª.',
                           reply_markup=button.next())


@dp.callback_query_handler(text='nope', state=quest.q9)
async def question_9(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–ù–∞—Å–ø—Ä–∞–≤–¥—ñ –º–æ–∂–µ!\n'
                                                   f'–ù–∞–π—á–∞—Å—Ç—ñ—à–æ—é –ø—Ä–∏—á–∏–Ω–æ—é –∫–∞—à–ª—é —É –ø–∞—Ü—ñ—î–Ω—Ç—ñ–≤ –∑ –≥–æ—Å—Ç—Ä–∏–º —á–∏ —Ö—Ä–æ–Ω—ñ—á–Ω–∏–º '
                                                   f'—Ä–∏–Ω–æ—Å–∏–Ω—É—Å–∏—Ç–æ–º —î —Å–ø–ª–∏–≤–∞–Ω–Ω—è –≤–∏–¥—ñ–ª–µ–Ω—å –ø–æ –∑–∞–¥–Ω—ñ–π —Å—Ç—ñ–Ω—Ü—ñ –≥–ª–æ—Ç–∫–∏. '
                                                   f'–£ —Ç–∞–∫–æ–º—É –≤–∏–ø–∞–¥–∫—É —Ä–∞–∑–æ–º –∑ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞–º–∏ –º—É–∫–æ–ª—ñ—Ç–∏–∫—ñ–≤ '
                                                   f'(¬´–†–µ—Å–ø–∏–∫—Å¬ª —Ç–∞–±–ª–µ—Ç–∫–∏, ¬´–†–µ—Å–ø–∏–∫—Å –õ¬ª) –¥–æ—Ü—ñ–ª—å–Ω–æ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–≤–∞—Ç–∏ '
                                                   f'–∫–æ–º–ø–ª–µ–∫—Å —Ä–æ—Å–ª–∏–Ω–Ω–∏—Ö –µ–∫—Å—Ç—Ä–∞–∫—Ç—ñ–≤ ¬´–†–µ—Å–ø–∏–∫—Å –°–∏–Ω—É—Å¬ª —É –≤–∏–≥–ª—è–¥—ñ –ø–æ—Ä–æ—à–∫—É '
                                                   f'–¥–ª—è –ø—Ä–∏–≥–æ—Ç—É–≤–∞–Ω–Ω—è –∑—ñ–≥—Ä—ñ–≤–∞—é—á–æ–≥–æ –Ω–∞–ø–æ—é.',
                           reply_markup=button.next())


# 9 –í–û–ü–†–û–°
# ******************************************************************************************************************
# 10 –í–û–ü–†–û–°


@dp.callback_query_handler(text='nxt', state=quest.q9)
async def question_10(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text="10 –∑–∞–ø–∏—Ç–∞–Ω–Ω—è –∑ 10\n\n"
                                                   "–§—ñ—Ç–æ–ø—Ä–µ–ø–∞—Ä–∞—Ç–∏ –Ω–µ –º–∞—é—Ç—å –¥–æ–∫–∞–∑–æ–≤–æ—ó –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –ø—Ä–∏ —Ä–∏–Ω–æ—Å–∏–Ω—É—Å–∏—Ç–∞—Ö",
                           reply_markup=button.yes_no())
    await quest.next()


@dp.callback_query_handler(text='yes_yes', state=quest.q10)
async def question_10(call: types.CallbackQuery):
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–©–µ –π —è–∫ –º–∞—é—Ç—å!\n'
                                                   f'–í—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –Ω–æ–≤–æ–≥–æ —î–≤—Ä–æ–ø–µ–π—Å—å–∫–æ–≥–æ —É–∑–≥–æ–¥–∂—É–≤–∞–ª—å–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç—É '
                                                   f'–∑ –ª—ñ–∫—É–≤–∞–Ω–Ω—è —Ä–∏–Ω–æ—Å–∏–Ω—É—Å–∏—Ç—É —ñ –ø–æ–ª—ñ–ø–æ–∑—É –Ω–æ—Å–∞ EPOS 2020 —Ñ—ñ—Ç–æ—Ç–µ—Ä–∞–ø—ñ—è '
                                                   f'–º–∞—î –≤–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å –¥–æ–∫–∞–∑–æ–≤–æ—Å—Ç—ñ ‚Äì 1b. '
                                                   f'–î–æ —Ä–æ—Å–ª–∏–Ω —ñ–∑ –¥–æ–≤–µ–¥–µ–Ω–æ—é –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—é –≤—ñ–¥–Ω–æ—Å—è—Ç—å, –∑–æ–∫—Ä–µ–º–∞, —ñ '
                                                   f'–ø–µ–ª–∞—Ä–≥–æ–Ω—ñ—é, —â–æ –≤—Ö–æ–¥–∏—Ç—å –¥–æ —Å–∫–ª–∞–¥—É ¬´–†–µ—Å–ø–∏–∫—Å –°–∏–Ω—É—Å¬ª.',
                           reply_markup=button.end())


@dp.callback_query_handler(text='nope', state=quest.q10)
async def question_10(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['points'] = data.get('points', 0) + 1
    await call.answer()
    await bot.send_message(call.from_user.id, text=f'–ê–±—Å–æ–ª—é—Ç–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n'
                                                   f'–û–∫—Ä–µ–º—ñ —Ñ—ñ—Ç–æ–ø—Ä–µ–ø–∞—Ä–∞—Ç–∏ –º–∞—é—Ç—å –¥–æ–≤–µ–¥–µ–Ω—É –µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —ñ–∑ —Ä—ñ–≤–Ω–µ–º '
                                                   f'–¥–æ–∫–∞–∑–æ–≤–æ—Å—Ç—ñ 1b ‚Äì –∑–Ω–∞—á–Ω–∏–π –≤–ø–ª–∏–≤ –Ω–∞ –∑–º–µ–Ω—à–µ–Ω–Ω—è —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ '
                                                   f'–∑–∞—Ö–≤–æ—Ä—é–≤–∞–Ω–Ω—è —Ç–∞ –π–æ–≥–æ —Å–∏–º–ø—Ç–æ–º—ñ–≤ –ø—Ä–∏ –≤—ñ–¥—Å—É—Ç–Ω–æ—Å—Ç—ñ —Å–µ—Ä–π–æ–∑–Ω–∏—Ö '
                                                   f'–ø–æ–±—ñ—á–Ω–∏—Ö –µ—Ñ–µ–∫—Ç—ñ–≤. EPOS 2020 —Ä–µ–∫–æ–º–µ–Ω–¥—É—î –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ç—É –∂ '
                                                   f'—Ç–∞–∫–∏ –ø–µ–ª–∞—Ä–≥–æ–Ω—ñ—é, —â–æ –≤—Ö–æ–¥–∏—Ç—å –¥–æ —Å–∫–ª–∞–¥—É ¬´–†–µ—Å–ø–∏–∫—Å –°–∏–Ω—É—Å¬ª, –ø—Ä–∏ '
                                                   f'–≥–æ—Å—Ç—Ä–æ–º—É –ø–æ—Å—Ç–≤—ñ—Ä—É—Å–Ω–æ–º—É —Ä–∏–Ω–æ—Å–∏–Ω—É—Å–∏—Ç—ñ.',
                           reply_markup=button.end())


# 10 –í–û–ü–†–û–°
# ******************************************************************************************************************
# –ö–û–ù–ï–¶. –ò–¢–û–ì–ò


@dp.callback_query_handler(text='endd', state=quest.q10)
async def back_end(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    async with state.proxy() as data:
        counter = data.get('points')
    db.update_point(call.from_user.id, counter)
    if counter == 0 or counter <= 4:
        await bot.send_photo(call.from_user.id,
                             photo=open(os.path.join(config.path_photo, 'COVER_PULMO_1.png'), 'rb'),
                             caption=f"{config.minimum}\n\n"
                                     f"–í–∞—à—ñ –±–∞–ª–∏: {counter}\n",
                             reply_markup=button.axxe(counter, config.minimum))
    elif counter >= 5 and counter <= 7:
        await bot.send_photo(call.from_user.id,
                             photo=open(os.path.join(config.path_photo, 'COVER_PULMO_2.png'), 'rb'),
                             caption=f"{config.medium}\n\n"
                                     f"–í–∞—à—ñ –±–∞–ª–∏: {counter}\n",
                             reply_markup=button.axxe(counter, config.medium))
    else:
        await bot.send_photo(call.from_user.id,
                             photo=open(os.path.join(config.path_photo, 'COVER_PULMO_3.png'), 'rb'),
                             caption=f"{config.maximum}\n\n"
                                     f"–í–∞—à—ñ –±–∞–ª–∏: {counter}\n",
                             reply_markup=button.axxe(counter, config.maximum))
    await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)
